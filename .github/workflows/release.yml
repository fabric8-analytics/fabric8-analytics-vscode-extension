---
name: Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type (patch, minor, major)'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
      publishToMarketplace:
        description: 'Publish to VSCode Marketplace'
        required: true
        type: boolean
        default: true
      publishToOVSX:
        description: 'Publish to Open VSX Registry'
        required: true
        type: boolean
        default: true
      publishPreRelease:
        description: 'Publish as pre-release version'
        required: true
        type: boolean
        default: false

jobs:
  release:
    permissions: write-all
    runs-on: ubuntu-latest
    if: github.repository_owner == 'fabric8-analytics'
    name: Create a release
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.DEPLOY_KEY }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://npm.pkg.github.com'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create .npmrc
        run: |
          echo "@trustification:registry=https://npm.pkg.github.com" > ~/.npmrc
          echo "@fabric8-analytics:registry=https://npm.pkg.github.com" >> ~/.npmrc
      
      - name: Install @vscode/vsce
        run: npm i -g @vscode/vsce

      - name: Install Dependencies
        run: npm ci

      - name: Update package with new version
        id: bump
        run: |
          new_version=$(npm version ${{ github.event.inputs.version_bump }} --no-git-tag-version)
          echo "version=$new_version" >> "$GITHUB_OUTPUT"

      - name: Compile for test
        run: npm run test-compile

      - name: VSCE package
        run: vsce package --out fabric8-analytics-${{ steps.bump.outputs.version }}-${{ github.run_number }}.vsix

      - name: Create SHA256 checksum
        run: |
          sha256sum fabric8-analytics-${{ steps.bump.outputs.version }}-${{ github.run_number }}.vsix > fabric8-analytics-${{ steps.bump.outputs.version }}-${{ github.run_number }}.vsix.sha256

      - name: Configure git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create release branch
        run: |
          git checkout -b release/${{ steps.bump.outputs.version }}

      - name: Create release notes from changelog
        id: release-notes
        run: |
          version="${{ steps.bump.outputs.version }}"
          version=${version#v}
          notes=$(echo -e "## Changelog\n$(sed -n "/## $version/,/^##/p" ./CHANGELOG.md | grep -v '##')")
          if [ -z "$notes" ]; then
            echo "Release notes are missing for version $version."
            exit 1
          else
            echo "version=$version" >> "$GITHUB_OUTPUT"

            notes="${notes//$'\''/%27}"
            notes="${notes//$'\n'/'%0A'}"
            notes="${notes//$'\r'/'%0D'}"
            delimiter="$(openssl rand -hex 8)"
            echo "notes<<${delimiter}" >> "$GITHUB_OUTPUT"
            echo "$notes" >> "$GITHUB_OUTPUT"
            echo "${delimiter}" >> "$GITHUB_OUTPUT"
          fi

      - name: Update current version date in changelog
        run: |
          day_suffix=$(date +"%e" | sed 's/^[[:space:]]*//')   

          if [ "$day_suffix" = "1" ] || [ "$day_suffix" = "21" ] || [ "$day_suffix" = "31" ]; then
            suffix="st"
          elif [ "$day_suffix" = "2" ] || [ "$day_suffix" = "22" ]; then
            suffix="nd"
          elif [ "$day_suffix" = "3" ] || [ "$day_suffix" = "23" ]; then
            suffix="rd"
          else
            suffix="th"
          fi

          today="$(date +"%b %-d")$suffix $(date +"%Y")"
          version="${{ steps.bump.outputs.version }}"

          if grep -qE "## $version \([^)]*\)" ./CHANGELOG.md; then
            current_date=$(grep -oP "(?<=## $version \()[^\)]*" ./CHANGELOG.md)

            if [ "$current_date" != "$today" ]; then
              sed -E -i "s/## $version \([^)]*\)/## $version ($today)/" CHANGELOG.md
            fi

          else
            sed -E -i "s/## $version/## $version ($today)/" CHANGELOG.md
          fi

      - name: Commit changes
        run: |
          git add CHANGELOG.md
          git add package.json
          git add package-lock.json
          git commit -m "release: updated package to ${{ steps.bump.outputs.version }} [skip ci]"

      - name: Push changes
        run: |
          git push origin release/${{ steps.bump.outputs.version }}

      - name: Create Pull Request
        run: |
          gh label create "${{ steps.bump.outputs.version }}" --force
          gh pr create \
            --base main \
            --title "Release ${{ steps.bump.outputs.version }}" \
            --body "$PR_BODY" \
            --head release/${{ steps.bump.outputs.version }} \
            --label "release" --label "${{ steps.bump.outputs.version }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_BODY: |
            This PR contains the changes for release ${{ steps.bump.outputs.version }}.
            
            Changes:
            - Updated version in package.json
            - Updated changelog

      - name: Create a release
        id: new_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const repo_name = context.payload.repository.full_name
            const response = await github.request('POST /repos/' + repo_name + '/releases', {
              tag_name: '${{ steps.bump.outputs.version }}',
              name: '${{ steps.bump.outputs.version }}',
              body: '${{ steps.release-notes.outputs.notes }}',
              prerelease: false,
              generate_release_notes: true
            })
            core.setOutput('upload_url', response.data.upload_url)

      - name: Upload packages and checksums as release assets
        run: |
          for file in fabric8-analytics-${{ steps.bump.outputs.version }}-${{ github.run_number }}.vsix*
          do
            asset_name=$(basename "$file")
            upload_url=$(echo "${{ steps.new_release.outputs.upload_url }}" | sed "s/{?name,label}/?name=$asset_name/g")
            curl --data-binary @"$file" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              "$upload_url"
          done

      - name: Publish to VSCode Marketplace
        if: ${{ github.event.inputs.publishToMarketplace == 'true' }}
        run: |
          vsce publish --pat ${{ secrets.VSCODE_MARKETPLACE_TOKEN }} --packagePath fabric8-analytics-${{ steps.bump.outputs.version }}-${{ github.run_number }}.vsix ${{ github.event.inputs.publishPreRelease == 'true' && '--pre-release' || '' }}

      - name: Publish to Open VSX Registry
        if: ${{ github.event.inputs.publishToOVSX == 'true' }}
        run: |
          npx ovsx publish --pat ${{ secrets.OVSX_MARKETPLACE_TOKEN }} --packagePath fabric8-analytics-${{ steps.bump.outputs.version }}-${{ github.run_number }}.vsix ${{ github.event.inputs.publishPreRelease == 'true' && '--pre-release' || '' }}
