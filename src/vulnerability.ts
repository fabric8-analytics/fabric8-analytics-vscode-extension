/* --------------------------------------------------------------------------------------------
 * Copyright (c) Red Hat
 * Licensed under the Apache-2.0 License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
'use strict';

import { DependencyData } from './dependencyAnalysis/analysis';
import { ImageData } from './imageAnalysis/analysis';
import { RHDA_DIAGNOSTIC_SOURCE } from './constants';
import { globalConfig } from './config';
import { Diagnostic, DiagnosticSeverity, Range } from 'vscode';

/**
 * Stores vulnerability data of a specific artifact (Image and dependency artifacts supported).
 */
class Vulnerability {
  /**
   * Creates a new instance of Vulnerability.
   * @param range - The text range within the document.
   * @param ref - The reference name of the artifact.
   * @param artifactData - All vulnerability data regarding the artifact.
   */
  constructor(
    private range: Range,
    private ref: string,
    private artifactData: DependencyData[] | ImageData[],
  ) { }

  /** 
   * Generate vulnerability information message
   * @param artifactData Properties of the artifact object
   * @returns vulnerability information message string
   */
  private generateVulnerabilityInfo(artifactData: DependencyData | ImageData): string {
    return `${artifactData.sourceId} vulnerability info:
Known security vulnerabilities: ${artifactData.issuesCount}
Highest severity: ${artifactData.highestVulnerabilitySeverity}`;
  }

  /**
   * Generate recommendation message from source
   * @param artifactData Properties of the artifact object
   * @returns source recommendation message string
   */
  private generateRecommendation(artifactData: DependencyData | ImageData): string {
    return `${artifactData.sourceId} vulnerability info:
Known security vulnerabilities: ${artifactData.issuesCount}
Recommendation: ${artifactData.recommendationRef || 'No Red Hat recommendations'}`;
  }


  /**
   * Creates a diagnostic object based on vulnerability data.
   * @returns A Diagnostic object representing the vulnerability.
   */
  getDiagnostic(): Diagnostic {

    let vulnerabilityAlertSeverity: DiagnosticSeverity;
    switch (globalConfig.vulnerabilityAlertSeverity) {
      case 'Error':
        vulnerabilityAlertSeverity = DiagnosticSeverity.Error;
        break;
      case 'Warning':
        vulnerabilityAlertSeverity = DiagnosticSeverity.Warning;
        break;
      default:
        vulnerabilityAlertSeverity = DiagnosticSeverity.Error;
        break;
    }

    const hasIssues = this.artifactData.some(data => data.issuesCount > 0);
    const diagnosticSeverity = hasIssues ? vulnerabilityAlertSeverity : DiagnosticSeverity.Information;

    const messages = this.artifactData.map(ad => {
      if (hasIssues && ad.issuesCount > 0) {
        return this.generateVulnerabilityInfo(ad);
      } else if (!hasIssues && globalConfig.recommendationsEnabled) {
        return this.generateRecommendation(ad);
      }
      return '';
    }).filter(message => message !== '');

    const message = `${this.ref}\n\n${messages.join('\n\n')}\n`;

    return {
      severity: diagnosticSeverity,
      range: this.range,
      message: message,
      source: RHDA_DIAGNOSTIC_SOURCE,
    };
  }
}

export { Vulnerability };